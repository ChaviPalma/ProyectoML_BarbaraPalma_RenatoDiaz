services:
  kedro-prod:
    build:
      context: .
      dockerfile: docker/Dockerfile.kedro
    container_name: kedro-prod
    command: kedro run
    environment:
      - KEDRO_HOME=/app
      - KEDRO_CONFIG_FILE=conf/base/parameters.yml
      - PYTHONPATH=/app/src
      - KEDRO_ENV=production
    volumes:
      - ./data:/app/data
      - ./conf:/app/conf
      - ./logs:/app/logs
      - ./sessions:/app/sessions
      - ./src:/app/src
    networks:
      - network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kedro", "info"]
      interval: 30s
      timeout: 10s
      retries: 3

  kedro-scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.kedro
    container_name: kedro-scheduler
    command: |
      sh -c "
      echo 'üöÄ Iniciando scheduler de Kedro...'
      while true; do
        echo '‚è∞ Ejecutando pipeline programado - $$(date)'
        kedro run --pipeline data_processing
        kedro run --pipeline data_science
        kedro run --pipeline reporting
        echo '‚úÖ Pipeline completado - $$(date)'
        echo '‚è≥ Esperando 1 hora para pr√≥xima ejecuci√≥n...'
        sleep 3600
      done
      "
    environment:
      - KEDRO_HOME=/app
      - KEDRO_CONFIG_FILE=conf/base/parameters.yml
      - PYTHONPATH=/app/src
      - KEDRO_ENV=production
    volumes:
      - ./data:/app/data
      - ./conf:/app/conf
      - ./logs:/app/logs
      - ./sessions:/app/sessions
      - ./src:/app/src
    networks:
      - network
    restart: unless-stopped
    depends_on:
      - kedro-prod

  jupyter-lab:
    build:
      context: .
      dockerfile: docker/Dockerfile.jupyter
    image: jupyter:latest
    container_name: jupyter
    environment:
      - KEDRO_HOME=/app
      - KEDRO_CONFIG_FILE=conf/base/parameters.yml
      - PYTHONPATH=/app/src
    volumes:
      - ./data:/app/data
      - ./conf:/app/conf
      - ./logs:/app/logs
      - ./sessions:/app/sessions
      - ./notebooks:/app/notebooks
      - ./src:/app/src
    ports:
      - "8888:8888"
    networks:
      - network
    restart: unless-stopped

  kedro-viz:
    build:
      context: .
      dockerfile: docker/Dockerfile.kedro
    container_name: kedro-viz
    command: ["kedro", "viz", "run", "--host", "0.0.0.0", "--port", "4141"]
    environment:
      - KEDRO_HOME=/app
      - KEDRO_CONFIG_FILE=conf/base/parameters.yml
      - PYTHONPATH=/app/src
    volumes:
      - ./data:/app/data
      - ./conf:/app/conf
      - ./logs:/app/logs
      - ./sessions:/app/sessions
      - ./src:/app/src
    ports:
      - "4141:4141"
    networks:
      - network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4141"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-proyecto-barbarapalma-renatodiaz}
      - POSTGRES_USER=${POSTGRES_USER:-kedro}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-kedro123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5433:5432"
    networks:
      - network

    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-kedro} -d ${POSTGRES_DB:-proyecto-barbarapalma-renatodiaz}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  network:
    driver: bridge